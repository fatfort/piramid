version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: piramid
      POSTGRES_USER: piramid
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-piramid123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U piramid -d piramid"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - piramid-network

  # NATS Message Broker
  nats:
    image: nats:2.10-alpine
    restart: unless-stopped
    command: [
      "--jetstream", 
      "--store_dir=/data",
      "-m", "8222"
    ]
    volumes:
      - nats_data:/data
    ports:
      - "4222:4222"
      - "8222:8222"  # HTTP monitoring
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 4222 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - piramid-network

  # PIRAMID API
  api:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.api
    restart: unless-stopped
    environment:
      - PORT=8080
      - DATABASE_URL=postgres://piramid:${POSTGRES_PASSWORD:-piramid123}@postgres:5432/piramid?sslmode=disable
      - NATS_URL=nats://nats:4222
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - GEOIP_DB_PATH=/usr/share/GeoIP/GeoLite2-City.mmdb
      - HOME_NET=${HOME_NET:-any}
    ports:
      - "8001:8080"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - geoip_data:/usr/share/GeoIP:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - piramid-network

  # Frontend
  frontend:
    image: nginx:1.25-alpine
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ../web/dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    networks:
      - piramid-network

  # Suricata IDS
  suricata:
    build:
      context: ../deploy/suricata
      dockerfile: Dockerfile
    restart: unless-stopped
    network_mode: host
    cap_add:
      - NET_ADMIN
      - SYS_NICE
    environment:
      - HOME_NET=${HOME_NET:-any}
      - INTERFACE=${INTERFACE:-eth0}
    volumes:
      - suricata_logs:/var/log/suricata
      - suricata_rules:/var/lib/suricata/rules
      - ./suricata/suricata.yaml:/etc/suricata/suricata.yaml:ro
      - ./suricata/rules:/etc/suricata/rules:ro
    depends_on:
      - eve2nats
    profiles:
      - production

  # Eve to NATS Bridge
  eve2nats:
    build:
      context: ..
      dockerfile: deploy/Dockerfile.eve2nats
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgres://piramid:${POSTGRES_PASSWORD:-piramid123}@postgres:5432/piramid?sslmode=disable
      - NATS_URL=nats://nats:4222
      - GEOIP_DB_PATH=/usr/share/GeoIP/GeoLite2-City.mmdb
    stdin_open: true
    tty: true
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    volumes:
      - suricata_logs:/var/log/suricata:ro
      - geoip_data:/usr/share/GeoIP:ro
    networks:
      - piramid-network
    profiles:
      - production

  # Grafana (Optional)
  grafana:
    image: grafana/grafana:10.2.0
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-worldmap-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - postgres
    networks:
      - piramid-network
    profiles:
      - observability

  # Traefik (Production)
  traefik:
    image: traefik:v3.0
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/letsencrypt
    networks:
      - piramid-network
    profiles:
      - production

volumes:
  postgres_data:
  nats_data:
  grafana_data:
  suricata_logs:
  suricata_rules:
  geoip_data:
  traefik_data:

networks:
  piramid-network:
    driver: bridge 